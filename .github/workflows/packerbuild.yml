name: Build Google Image

on:
  push:
    branches:
      - main

jobs:
  packerbuild-googleimage:
    name: Build Google Machine Image
    runs-on: ubuntu-latest

    steps:
    - name: Starting the Postgres Service
      run: |
        sudo service postgresql start
        sudo chmod 700 /var/run/postgresql/.s.PGSQL.5432 || true
        sudo sed -i 's/^\(host.all.*all.\)\(ident\)\(.*\)$/\1md5\3/g' /etc/postgresql/14/main/pg_hba.conf
        sudo systemctl restart postgresql
        sudo systemctl status postgresql
        sudo -i -u postgres psql -c "ALTER USER postgres WITH PASSWORD '${{ secrets.PGPASSWORD }}';"

    - name: Checkout code
      uses: actions/checkout@v3
      
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
          node-version: 20.6
          cache: 'npm'

    - name: Create Zip Archive
      run: |
        zip -r webapp.zip ./

    - name: Install dependencies
      run: npm install

    - name: Display .env file
      run: |
        echo APP_PORT=${{ vars.APP_ENV }} >> .env
        echo DB_NAME=${{ secrets.PGDATABASE }} >> .env
        echo DB_USER=${{ secrets.PGUSER }} >> .env
        echo DB_PASSWORD=${{ secrets.PGPASSWORD }} >> .env
        echo DB_PORT=${{ secrets.PGPORT }} >> .env
        echo DB_HOSTNAME=${{ secrets.PGHOST }} >> .env
        echo DB_DIALECT=postgres >> .env
        echo TOPIC_NAME=${{ secrets.TOPIC_NAME }} >> .env
        echo SENDER_EMAIL=${{ secrets.SENDER_EMAIL }} >> .env
        cat .env

    - name: Run Integration tests
      run : npm test
    
    - name: Authenticate with Google Cloud Platform
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.PACKER_SERVICEACCOUNT_KEY }}

    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v2

    - name: Set up Packer
      run: |
        wget https://releases.hashicorp.com/packer/1.7.3/packer_1.7.3_linux_amd64.zip
        unzip packer_1.7.3_linux_amd64.zip
        chmod +x packer
        sudo mv packer /usr/local/bin/
      shell: bash
    
    # - name: Initialize Packer
    #   run: packer init gcp.pkr.hcl

    # - name: Build Machine Image
    #   run: |
    #     packer build \
    #       -var "project_id=${{ secrets.PROJECTID }}" \
    #       -var "zone=${{ secrets.ZONE }}" \
    #       -var "source_image_family=${{ secrets.IMAGEFAMILY }}" \
    #       gcp.pkr.hcl
    
    - name: Get latest machine image ID
      id: get-image-id
      run: |
        latest_image=$(gcloud compute images list --format="value(name)" --filter="name:packer-*" --sort-by="~creationTimestamp" --limit=1) \
        latest_image="projects/csye6225-ankit-cloud-413805/global/images/$latest_image"
        echo "::set-output name=image_id::$latest_image"
    
    - name: Create Instance Template
      run: |
        gcloud compute instance-templates create ${{ secrets.TEMPLATE_NAME }} \
          --create-disk=image=${latest_image},size=${{ secrets.TEMPLATE_DISK_SIZE }},type=${{ secrets.TEMPLATE_DISK_TYPE }},boot=${{ secrets.TEMPLATE_BOOT }},kms-key=${{ secrets.TEMPLATE_KMS_KEY }} \
          --machine-type=${{ secrets.TEMPLATE_MACHINE_TYPE }} \
          --tags=${{ secrets.TEMPLATE_TAGS }} \
          --network-interface=network-tier=${{ secrets.TEMPLATE_NETWORK_TIER }},subnet=${{ secrets.TEMPLATE_SUBNET }} \
          --service-account=${{ secrets.TEMPLATE_SERVICE_ACCOUNT }} \
          --scopes=${{ secrets.TEMPLATE_SCOPES }} \
          --region=${{ secrets.TEMPLATE_REGION }} \
          --metadata=startup-script="
            ENV_FILE=\"/opt/csye6225/.env\";
            if [ ! -f \"\$ENV_FILE\" ]; then
                DB_NAME=\"${{ secrets.DB_NAME }}\";
                DB_USER=\"${{ secrets.DB_USER }}\";
                DB_PASSWORD=\"${{ secrets.DB_PASSWORD }}\";
                DB_HOSTNAME=\"${{ secrets.DB_HOSTNAME }}\";
                DB_DIALECT=\"${{ secrets.DB_DIALECT }}\";
                DB_PORT=\"${{ secrets.DB_PORT }}\";
                APP_PORT=\"${{ secrets.APP_PORT }}\";
                LOG_FILE_PATH=\"${{ secrets.LOG_FILE_PATH }}\";
                LOG_LEVEL=\"${{ secrets.LOG_LEVEL }}\";
                TOPIC_NAME=\"${{ secrets.TOPIC_NAME }}\";
                SENDER_EMAIL=\"${{ secrets.SENDER_EMAIL }}\";
                LINK_EXPIRATION_TIME_IN_MINUTES=\"${{ secrets.LINK_EXPIRATION_TIME_IN_MINUTES }}\";

                echo \"DB_NAME=\$DB_NAME\" | sudo tee \"\$ENV_FILE\";
                echo \"DB_USER=\$DB_USER\" | sudo tee -a \"\$ENV_FILE\";
                echo \"DB_PASSWORD=\$DB_PASSWORD\" | sudo tee -a \"\$ENV_FILE\";
                echo \"DB_PORT=\$DB_PORT\" | sudo tee -a \"\$ENV_FILE\";
                echo \"DB_HOSTNAME=\$DB_HOSTNAME\" | sudo tee -a \"\$ENV_FILE\";
                echo \"DB_DIALECT=\$DB_DIALECT\" | sudo tee -a \"\$ENV_FILE\";
                echo \"APP_PORT=\$APP_PORT\" | sudo tee -a \"\$ENV_FILE\";
                echo \"LOG_FILE_PATH=\$LOG_FILE_PATH\" | sudo tee -a \"\$ENV_FILE\";
                echo \"LOG_LEVEL=\$LOG_LEVEL\" | sudo tee -a \"\$ENV_FILE\";
                echo \"TOPIC_NAME=\$TOPIC_NAME\" | sudo tee -a \"\$ENV_FILE\";
                echo \"SENDER_EMAIL=\$SENDER_EMAIL\" | sudo tee -a \"\$ENV_FILE\";
                echo \"LINK_EXPIRATION_TIME_IN_MINUTES=\$LINK_EXPIRATION_TIME_IN_MINUTES\" | sudo tee -a \"\$ENV_FILE\";
            else
                echo \".env file already exists, skipping adding values.\";
            fi
          "
      env:
          latest_image: ${{ steps.get-image-id.outputs.image_id }}
    
    - name: Set Instance Template for Managed Instance Group
      run: |
        gcloud compute instance-groups managed set-instance-template ${{ secrets.TEMPLATE_MIG_NAME }} \
          --template=projects/csye6225-ankit-cloud-413805/regions/us-central1/instanceTemplates/${{ secrets.TEMPLATE_NAME }} \
          --region=${{ secrets.TEMPLATE_REGION }}

    - name: Recreate Instances in Managed Instance Group
      run: |
        gcloud compute instance-groups managed rolling-action replace ${{ secrets.TEMPLATE_MIG_NAME }} \
          --max-surge=3 \
          --max-unavailable=0 \
          --region=${{ secrets.TEMPLATE_REGION }}
    
    - name: Wait for Substitution of instances in MIG
      run: |
        gcloud compute instance-groups managed wait-until ${{ secrets.TEMPLATE_MIG_NAME }} \
          --version-target-reached \
          --region=${{ secrets.TEMPLATE_REGION }}
